<?xml version="1.0" encoding="UTF-8"?>

<chapter id="ch_utilities">

<title>SMOKE Utility Tools</title>

<section>

<title>Overview</title>
<para>The utility tools are divided into two sections: MOVES Utility Scripts and SMOKE Utility Programs</para>

</section>

<section id="section_moves_utilities">

<title>MOVES Utility Scripts</title>

<section>

<title>Overview</title>
<para>The MOVES utility scripts are designed to assist the user by automating the proper use of using MOVES emission rate calculations for the purpose of estimating mobile-source emissions for air quality modeling.  The MOVES default database has over 100 different tables that store lookup/reference information, conversions/adjustment factors, emissions data, and activity data. MOVES uses MySQL databases to store user inputs, intermediate results and final outputs. The MOVES utility scripts consist of 1) MOVES Driver script and 2) MOVES Post-processing scripts. These scripts are run after the meteorological data processor program (<command>Met4moves</command>) which prepares the spatially and temporally averaged temperatures and relative humidity data used as meteorological input conditions for MOVES and SMOKE using the Meteorology-Chemistry Interface Processor (MCIP) output files.</para> 
<para>The MOVES Driver script (<command>Runspec_generator.pl</command>) creates data importer files and importer script and the MOVES batch run script which specifies the characteristic of the particular scenario to be modeled.</para>
<para>The MOVES Post-processing script (<command>Moves2smkEF.pl</command>) formats the MOVES emission rate lookup tables for SMOKE. The second MOVES Post-processing script (<command>gen_8digit_scc.pl</command>) generates an SCC mapping file used when importing activity data in <command>Smkinven</command>. After the MOVES utility scripts are completed, the SMOKE postprocessing program (<command>Movesmrg</command>) estimates emissions from mobile sources using the SMOKE formatted MOVES lookup tables (RPD, RPP, RPV, and RPH) output generated by the MOVES utility scripts and meteorology data from <command>Met4moves</command>.</para>
<para><command>Movesmrg</command> creates hourly, gridded, speciated air quality model-ready input files. Information about key concepts related to the MOVES utility scripts including Representative Counties, Fuels Months, and Emissions Processes are covered in <xref linkend="sect_concepts_reference_counties_moves"/> and  <xref linkend="sect_concepts_moves_reference_fuel_month"/> and <xref linkend="sect_concepts_moves_emission_processes"/></para>

</section>

<section id="section_moves_driver_script">
<title>MOVES Driver Scripts</title>

<para>The MOVES Runspec script <command>Runspec_generator.pl</command> is written in Perl, generates the scripts and inputs needed to run MOVES for each representative county. The MOVES Model can be run at any of the three domains/scales: national, county or project.  The <command>Runspec_generator.pl</command> is only applicable to the county-level because this level of model detail is required by EPA for SIP and conformity analyses.  For this scale, MOVES requires a MySQL input database containing local data for a single county. The <command>Runspec_generator.pl</command> is designed to prepare the MOVES importer and MOVES run scripts so that the fewest number of runs will produce all of the necessary emissions factors. In this approach, user can specify one or more groups of pollutants to model in the run control fil.</para>
<para>There are a total of four types of modeling pollutant groups: 1) Ozone precursors, 2) Toxics, 3) Particulate Matters, and 4) GreenHouse Gases (GHG) based on <xref linkend="tbl_concepts_moves_pollutant_groups"/>.  The choice of pollutant group(s) determines what pollutants are included in the three emission rate lookup tables (RPD, RPV, and RPP) by MOVES.</para> 

<section>
<title>Processing Order</title>

<para><command>Runspec_generator.pl</command> run after <command>Met4moves</command>. It assembles the instructions for MOVES to create MySQL input databases from XML files and creates the importer.csh scripts and assembles run specification XML files to run MOVES for a necessary range of conditions (for each emissions process: rate-per-distance, rate-per-vehicle, and rate-per-profile) based on the <command>Met4moves</command> output temperature list by county-specific runspec.csh.</para> 

<para>The <command>Runspec_generator.pl</command> uses following steps:</para>

<orderedlist>
<listitem>
<para>Reads the representative county min/max temperature and 24-hours temperature profiles output file from <command>Met4moves</command> for RPP mode. Find detail information from <xref linkend="sect_intmed_moves_output"/></para>
</listitem>
<listitem>
<para>Reads the representative county specific min/max temperatures and average RH output file from <command>Met4moves</command> for RPD, RPV and RPH modes. Find detail information from <xref linkend="sect_intmed_moves_rh_output"/></para>
</listitem>
<listitem>
<para>Import the name of pollutant group to model from the run control file (<link linkend="sect_input_runctlfile">contorl.in</link>) based on <xref linkend="tbl_concepts_moves_pollutant_groups"/></para>
</listitem>
<listitem>
<para>Reads the run control file (<link linkend="sect_input_runctlfile">control.in</link>) and representative county file (<link linkend="sect_input_refcountyfile">countyrep.in</link>) created by user.</para>
</listitem>
<listitem>
<para>Assembles instructions for MOVES to create MySQL input databases from XML files
(data importer).</para>
</listitem>
<listitem>
<para>Assembles runspec XML files to run MOVES for a wide range of conditions.</para>
</listitem>
<listitem>
<para>Generates the run-specific temperature and humidity comma-separated-values (CSV) format file.</para>
</listitem>
<listitem>
<para> Assembles a batch list of data importer files, runspec files, and also a list of the
MySQL output database names to be postprocessed.</para>
</listitem>
<listitem>
<para>importer.csh and runspec.csh scripts are used to create the on-road operating rateperdistance table (RPD), off-network processes ratepervehicle table (RPV),  and vapor venting off-network rateperprofile table (RPP).</para>
</listitem>
<listitem>
<para>Review log file of the MOVES, called runlog_*.txt.</para>
</listitem>

</orderedlist>

</section>

<section>
<title>How-To-Run</title>
<para>Check out the most latest processing scripts and the <quote>How to run</quote> instructions are available from  <ulink url="https://github.com/CEMPD/SMOKE-MOVES/">the SMOKE-MOVES Github repository</ulink>.</para>
</section>


<section>

<title>Files and Environment Variables</title>

<section>
<title>Input Files</title>

<table id="tbl_smoke_moves_utility_script">
<title>Input Files</title>

<tgroup cols="3">
<colspec colname="c1" colwidth="25*" />
<colspec colname="c2" colwidth="10*" />
<colspec colname="c3" colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><link linkend="sect_input_refcountyfile">countyrep.in</link></entry>
<entry>ASCII</entry>
<entry>Representative county file containing the county/state/country FIPS codes and the full path and file names for the files containing MOVES data for AGE, FUELSUPPLY, FUELFORM(optional), IM, POP, SourceType, HPMSVMT, VMT for each representative county</entry>
</row>
<row>
<entry><link linkend="sect_input_runctlfile">control.in</link></entry>
<entry>ASCII</entry>
<entry>Run control file that user specifies fields for the Database Host, Project Name, Model year, day type (weekday or weekend), pollutant and the met4moves MET output file for the batch run of MOVES</entry>
</row>
<row>
<entry><link linkend="sect_intmed_moves_output">MOVES_OUTFILE</link></entry>
<entry>ASCII</entry>
<entry><command>Met4moves</command> output for each fuel month for the MOVES Driver script (minimum and maximum temperatures, and 24-hour temperature profiles for all representative counties by temperature bin)</entry>
</row>
<row>
<entry><link linkend="sect_intmed_moves_rh_output">MOVES_RH_OUTFILE</link></entry>
<entry>ASCII</entry>
<entry><command>Met4moves</command> outputs fuel month-specific averaged, min, and max temperatures and averaged RH values in local time for all representative counties by temperature bin</entry>
</row>
<row>
<entry><link linkend="sect_input_sourceTypeAgeDist">sourceTypeAgeDistribution</link></entry>
<entry>ASCII</entry>
<entry>Age distribution by source type over 30 vehicle model years</entry>
</row>
<row>
<entry><link linkend="sect_input_fuelsupply">fuelSupply</link></entry>
<entry>ASCII</entry>
<entry>list directed file used to define the fuel properties, their market shares and the months that the fuels are used for each representative county</entry>
</row>
<row>
<entry><link linkend="sect_input_fuelformulation">fuelformulation (optional)</link></entry>
<entry>ASCII</entry>
<entry>list directed file used to define the fuel supply and the months that the fuels are used for each representative counties</entry>
</row>
<row>
<entry><link linkend="sect_input_IMcoverage">IMCoverage</link></entry>
<entry>ASCII</entry>
<entry>list directed file used to define the inspection and maintanance data available for each representative counties</entry>
</row>
<row>
<entry><link linkend="sect_input_sourcetypeyear">sourcetypeyear</link></entry>
<entry>ASCII</entry>
<entry>Vehicle population by MOVES source type</entry>
</row>
<row>
<entry><link linkend="sect_input_HPMSVTypeYear">HPMSVTypeYear</link></entry>
<entry>ASCII</entry>
<entry>list directed file used to define the annual VMT by Highway Performance Monitoring System (HPMS) vehicle type</entry>
</row>
<row>
<entry><link linkend="sect_input_dummy_avgspeeddistribution">dummy_avgspeeddistribution</link></entry>
<entry>ASCII</entry>
<entry>Speed distribution by roadway type and vehicle class. MOVES dummy inputs files provided with tool package in OUTDIR directory</entry>
</row>
<row>
<entry><link linkend="sect_input_dummy_monthvmtfraction">dummy_monthvmtfraction</link></entry>
<entry>ASCII</entry>
<entry>list directed file that allocates annual VMT to the individual months</entry>
</row>
<row>
<entry><link linkend="sect_input_dummy_dayvmtfraction">dummy_dayvmtfraction</link></entry>
<entry>ASCII</entry>
<entry>file that allocates month VMT day type, weekday or weekend and the decimal fraction of the proportion of vehicle miles travelled for the weekday or weekend day type</entry>
</row>
<row>
<entry><link linkend="sect_input_dummy_hourvmtfraction">dummy_hourvmtfraction</link></entry>
<entry>ASCII</entry>
<entry>list directed file that allocates the day-type VMT to individual hours of the day</entry>
</row>
<row>
<entry><link linkend="sect_input_dummy_roadtypedistribution">dummy_roadtypedistribution</link></entry>
<entry>ASCII</entry>
<entry>list directed file that allocates annual VMT to five MOVES roadway types</entry>
</row>
</tbody>
</tgroup>
</table>

</section>

<section id="section_moves_driver_script_output">

<title>Output Files</title>
<informaltable>
<tgroup cols="3">
<colspec colwidth="25*" />
<colspec colwidth="10*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><link linkend="section_moves_runspec_batch">runspec.csh</link></entry>
<entry>ASCII</entry>
<entry>Batch or c-shell script to run required MOVES runs. Fine more information from <xref linkend="section_moves_runspec_batch"/></entry>
</row>
<row>
<entry><link linkend="section_moves_importer">importer.csh</link></entry>
<entry>ASCII</entry>
<entry>Batch or c-shell Script to create MySQL MOVES databases and import the data. Fine more information from <xref linkend="section_moves_importer"/></entry>
</row>
<row>
<entry>InputDBlist</entry>
<entry>ASCII</entry>
<entry>
<para>List of MySQL database names to process. It will be used as an input to MOVES Post-processing script. See example below:</para>
<programlisting>
localhost
/work/MOVES_Processing_Scripts/post_process
13121_2008_1
</programlisting>
</entry>
</row>
<row>
<entry>Data importer files</entry>
<entry>ASCII</entry>
<entry>data importer files (*_imp.xml)</entry>
</row>
<row>
<entry>Runspec files</entry>
<entry>ASCII</entry>
<entry>runspec files (*_mrs.xml)</entry>
</row>
<row>
<entry>zonemonthhour files</entry>
<entry>ASCII</entry>
<entry>MOVES-formatted zonemonthhour (*_zmh.csv) contains temperature and RH data from the Met4Moves Meteorological processor. Relative Humidity is a single value averaged over the time period selected by the user in Met4Moves and averaged over the entire group of inventory counties that map to a representative county.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="section_moves_runs">

<title>Run MOVES Model</title>

<section>
<title>Overview</title>
<para>Automatically execute multiple MOVES runs based on automatically generated county-specific data importer script and the MOVES run script file by <command>Runspec_generator.pl</command>, which specifies the characteristic of the particular scenario to be modeled.</para>
</section>


<section id="section_moves_importer">
<title>MOVES importer script</title>

<section>
<title>Description</title>

<para>The MOVES importer script <quote>importer.[bat|csh]</quote> can be written in Linux C-shell or Windows Batch script format depending on which option is chosen by the user in the <command>Runspec_generator.pl</command>. The importer script loads the county-specific data in the file and creates the MySQL input database containing local data for the representative county. </para> 
<para>The output of the MOVES batch importer script includes:</para>
<itemizedlist>
<listitem>
<para>MySQL databases (*_in).</para>
</listitem>
</itemizedlist>
</section>

<section>

<title>Processing Order</title>

<para>importer.csh should be run before runspec.csh.  The importer.csh is written in Linux c-shell script format.</para> 
<para>The importer.csh uses following steps:</para>

<orderedlist>
<listitem>
<para>The importer.csh contains all of the user selections needed to import data from the files into a MySQL MOVES database</para>
</listitem>

<listitem>
<para>Imports the data for each of the three different emissions processes: RPD, RPV, RPP.</para>
</listitem>

<listitem>
<para>Review log file of the MOVES, called importlog_*.txt.</para>
</listitem>

</orderedlist>

</section>

<section>

<title>Files, Environment Variables, and Run Syntax</title>

<section>
<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="60*" />
<colspec colwidth="8*" />
<colspec colwidth="40*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry>RV_[CountyRep]_[yearID]_[monthID]_[TempBin]_imp.xml </entry>
<entry>XML</entry>
<entry>file specifies the zonemonthhour (*zmh.csv) files and other files that will be imported to MOVES for the Rate Per Vehicle Mode, note: TempBin varies, in 5 degree increments to cover the Temperature Range ie. [TempBin] = T10, T15,.. T105 for the temperature range [TempRange]= T10_105</entry>
</row>
<row>
<entry>RP_[CountyRep]_[yearID]_[monthID]_[MetProfID]_imp.xml </entry>
<entry>XML</entry>
<entry>file specifies the zonemonthhour (*zmh.csv) files that will be imported to MOVES for the Rate Per Process Mode</entry>
</row>
<row>
<entry>RD_[CountyRep]_[yearID]_[monthID]_[TempRange]_imp.xml </entry>
<entry>XML</entry>
<entry>importer file specifies the zonemonthhour (*zmh.csv) files that will be imported to MOVES for Rate Per Distance Mode</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Output Files</title>
<informaltable><tgroup cols="3">
<colspec colwidth="40*" />
<colspec colwidth="9*" />
<colspec colwidth="40*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry>RD_[CountyRep]_[yearID]_[monthID]_[TempRange]_in</entry>
<entry>MySQL </entry>
<entry>MOVES MySQL Database RPD Table (*_in)</entry>
</row>
<row>
<entry>RP_[CountyRep]_[yearID]_[monthID]_[MetProfID]_in</entry>
<entry>MySQL </entry>
<entry>MOVES MySQL Database RPP SMOKE format Table (*_in)</entry>
</row>
<row>
<entry>RV_[CountyRep]_[yearID]_[monthID]_[TempBin]_in</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RPV Table(*_in)</entry>
</row>

</tbody>
</tgroup>
</informaltable>
</section>

</section>

</section>

<section id="section_moves_runspec_batch">

<title>MOVES Runspec batch script</title>

<section>

<title>Description</title>
<para>The MOVES Runspec batch script file <quote>runspec.csh</quote> is used to execute the MOVES runs for the representative county and reference fuel month. </para> 
<para>The output directories are named according to the following naming convention: [CountyRep]_[monthID]_[YearID]_[PollutantID], ie. 13121_Apr_2009_ozone</para>
<para>The output files include:</para>
<itemizedlist>
<listitem>
<para>rateperdistance.[frm|MYD|MYI]</para>
</listitem>
<listitem>
<para>ratepervehicle.[frm|MYD|MYI]</para>
</listitem>
<listitem>
<para>rateperprofile.[frm|MYD|MYI]</para>
</listitem>
</itemizedlist>
</section>

<section>

<title>Processing Order</title>

<para>runspec.csh is created by <command>Runspec_generator.pl</command> and should be run after importer.csh and before <command>moves2smkEF.pl</command>.  The runspec.csh is written in Linux c-shell script format depending on which platform is being used (this option is specified by the user in the Runspec_generator.pl) the script is used to run MOVES for the appropriate temperature bins, source types, and poluutants.  </para> 
<para>The runspec.csh uses following steps:</para>

<orderedlist>
<listitem>
<para>The runspec.csh contains all of the user selections needed to run MOVES using the imported MySQL MOVES databases that were created by importer.csh</para>
</listitem>

<listitem>
<para>Creates the MOVES output in ASCII format and also provides the associated XML files for the three different emissions processes: RPD, RPV, RPP.</para>
</listitem>

<listitem>
<para>Review log file of the MOVES, called runlog_*.txt.</para>
</listitem>

</orderedlist>

</section>

<section>

<title>Files, Environment Variables, and Run Syntax</title>

<section>
<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="40*" />
<colspec colwidth="10*" />
<colspec colwidth="50*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><link linkend="section_moves_runspec_batch">runspec.csh</link></entry>
<entry>ASCII</entry>
<entry>runspec script to use the MySQL MOVES databases created by importer.csh and run MOVES</entry>
</row>
<row>
<entry>RV_[SCC]_[YR]_[M]_[TempBin]_mrs.xml </entry>
<entry>XML</entry>
<entry>importer file specifies the zonemonthhour (*zmh.csv files that will be imported to MOVES for the Rate Per Vehicle Mode</entry>
</row>
<row>
<entry>RP_[SCC]_[YR]_[M]_[ProfMYEAR???]_mrs.xml </entry>
<entry>XML</entry>
<entry>importer file specifies the *.csv files that will be imported to MOVES for the Rate Per Process Mode</entry>
</row>
<row>
<entry>RD_[SCC]_[YR]_[M]_[TempBin]_[85 or 90?]_mrs.xml </entry>
<entry>XML</entry>
<entry>importer file specifies the *.csv files that will be imported to MOVES for Rate Per Distance Mode</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>

<section>

<title>Output Files</title>

<para>Note: these output files are placed in separate directories for each representative county, fuel month and pollutant. Example: .../outputs/mysql/13121_Jan_2009_ozone</para>
<informaltable><tgroup cols="3">
<colspec colwidth="40*" />
<colspec colwidth="9*" />
<colspec colwidth="40*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry>rateperdistance.[frm|MYD|MYI]</entry>
<entry>MySQL </entry>
<entry>MOVES MySQL Database RPD Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>ratepervehicle.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RPV Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>ratepervehicle_smoke.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RPV SMOKE format Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>rateperprofile.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RPP Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>rateperprofile_smoke.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RPP SMOKE format Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>activitytype.[frm|MYD|MYI]</entry>
<entry>MySQL </entry>
<entry>MOVES MySQL Database activity type Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>agefractotals.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES age fraction totals Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>movesactivityoutput.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database activity output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>moveserror.[frm|MYD|MYI]</entry>
<entry>MySQL </entry>
<entry>MOVES MySQL Database error Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>moveseventlog.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database event log Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>movesoutput.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>movesrun.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database run Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>movestablesused.[frm|MYD|MYI]</entry>
<entry>MySQL </entry>
<entry>MOVES MySQL Database tables used Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>movesworkersused.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database workers used Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>moves.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>rdprex.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RDPREX Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>rpprex.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RPPREX output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>rvprex.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database RVPREX Table(*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>sccvtypeagedistribution.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database SCCV Type Age Distribution output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>sccvtypeagedistribution_final.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database SCCV Type Age Distribution Final output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>tmprdscc.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database temporary RD SCC output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>tmprpscc.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database temporary RP SCC output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>tmprvscc.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database temporary RV SCC output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>tmp_sccroadtypedistribution.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database temporary scc road type distribution output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>tmp_srcfuelagedistribution.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database temporary source fuel age distribution output Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>travelfrac_denominator.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database travel fraction denominator Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>travelfrac_numerator.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database travel fraction numerator Table (*.frm,*.MYD,*.MYI)</entry>
</row>
<row>
<entry>travelfractions.[frm|MYD|MYI]</entry>
<entry>MySQL</entry>
<entry>MOVES MySQL Database travel fractions Table (*.frm,*.MYD,*.MYI)</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>

</section>
</section>

</section>

<section id="section_moves_postprocessing_scripts">

<title>MOVES Post-processing scripts</title>

<section>
<title>Overview</title>
<para>The MOVES Post-processing scripts consist of two Perl scripts. One is called <command><quote>Moves2smkEF.pl</quote></command> which extracts the emissions factor tables from the MOVES databases and converts them into a format that can be used as SMOKE inputs. The second script, called <command><quote>gen_8digit_scc.pl</quote></command>, produces a file mapping 8-digit SCCs to 10-digit SCCs used when importing activity data in <command>Smkinven</command>.</para>
</section>

<section>

<title><command>Moves2smkEF.pl</command></title>

<section>

<title>Description</title>

<para>The MOVES post-processor script <command><quote>Moves2smkEF.pl</quote></command> extracts the emission factor tables from the MOVES databases (RPD, RPV, RPP, and RPH MOVES formatted Lookup tables) and converts them into a format that can be processed using <command>Movesmrg</command>.</para>

<orderedlist>
<listitem>
<para>Create a new field for 'countyID'</para>
<para>None of the MOVES lookup tables contain a countyID field solely dedicated to a state-county FIPS code, but SMOKE needs this information.  For this reason, <command>Moves2smkEF.pl</command> creates a county field by extracting it from other fields that include county codes as part of their value.  The RPD table has a linkID field that contains countyID in the leading five digits followed by more numbers to allow for future implementation of link modeling.  The RPV table has a zoneID field that is countyID with a trailing zero.  The RPP table has a TemperatureProfileID field, which also leads with countyID and is trailed by other numbers to indicate month and other identification.  The RPH table has a linkID field the same as the RPD table. The postprocessing script parses countyID from linkID, zoneID and TemperatureProfileID and stores it as a separate field.</para>
</listitem>
<listitem>
<para>Map MOVES pollutantID to output pollutant/species name</para>
<para>The pollutant mapping file has columns for MOVES2014 Pollutant ID, MOVES2014 Pollutant Name, and SMOKE Pollutant/Model Species Name. <command>Moves2smkEF.pl</command> reads this list to determine which MOVES pollutants to output in the emission factor files and what name to use for each pollutant. Because MOVES2014 contains emission factors for both inventory pollutants and model species, the sample pollutant mapping file included with SMOKE uses the _INV suffix to distinguish inventory pollutants from model species.</para>
</listitem>
<listitem>
<para>Cross-tab pollutantID to reduce output table size</para>
<para>Each of the four MOVES lookup tables contains a pollutantID field, and associated emission rates for each are listed in the ratePerDistance, ratePerVehicle, or ratePerHour field (depending on lookup table).  This table structure repeats the leftmost fields (e.g., MOVESRunID, yearID, monthID) for each pollutantID, which greatly increases the total number of rows.  The cross-tabbing postprocessing step replaces the column for 'ratePerDistance' (or 'ratePerVehicle' or 'ratePerHour') with additional pollutant-specific columns containing values of emission rates. For example, new field headings would include 'CO_INV', 'NOX', 'BENZENE_INV', etc. Performing this cross-tab on the pollutant emission rates significantly reduces the size of the tables for use by SMOKE.</para>
</listitem>

<listitem>
<para>Aggregate emission factors by fuel type, source type, road type, and/or process type</para>
<para>To reduce the total number of sources to be processed in SMOKE, <command>Moves2smkEF.pl</command> supports user-specified aggregations of MOVES fuel types, source types, road types, and process types to SCCs.</para>
</listitem>

<listitem>
<para>Apply formulas to calculate additional inventory pollutants or model species</para>
<para>Formulas can be applied to augment the existing MOVES output pollutants. For example, speciated versions of criteria pollutants are not provided in the MOVES2014 output nor are speciated emission factors for brake and tire wear.</para>
</listitem>
<listitem>
<para>Create final emission rate lookup tables in SMOKE format</para>
<para>The four postprocessed tables named rateperdistance_smoke, ratepervehicle_smoke, rateperprofile_smoke, and rateperhour_smoke are exported from MySQL into ASCII files for their use in SMOKE.</para>

</listitem>
</orderedlist>

</section>

<section>
<title>Processing Order</title>
<para><command>Moves2smkEF.pl</command> is run after <command>Runspec_generator.pl</command>, and before any SMOKE processing. The <command>Moves2smkEF.pl</command> is written in Perl, generates SMOKE-ready MOVES lookup tables (i.e., RPD, RPV, RPP, and RPH) by each representative county and fuel month for inputs to <link linkend="sect_programs_movesmrg"><command>Movesmrg</command></link>.</para> 
</section>

<section>
<title>Files, Environment Variables and Run Syntax</title>

<section>
<title>Input Files</title>
<informaltable id="tbl_moves_lookup_tables">
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />
<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<simplelist>
<member>rateperdistance</member>
<member>ratepervehicle</member>
<member>rateperprofile</member>
<member>rateperhour</member>
</simplelist>
</entry>
<entry>MOVES format</entry><entry>Columns in the MOVES Emission Rate Lookup Table are described in <xref linkend="tbl_concepts_moves_lookup_tbl_mv_format"/>.</entry></row><row>
</row>
<row>
<entry><envar>InputDBList</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MySQL database names to process generated by <command>Runspec_generator.pl</command></entry>
</row>
<row>
<entry><envar>PollutantFormulasFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of formulas used to calculate additional emission factors</entry>
</row>
<row>
<entry><envar>FuelTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES fuel type IDs and corresponding aggregated fuel type ID</entry>
</row>
<row>
<entry><envar>SourceTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES source type IDs and corresponding aggregated source type ID</entry>
</row>
<row>
<entry><envar>RoadTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES road type IDs and corresponding aggregated road type ID</entry>
</row>
<row>
<entry><envar>ProcessTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES process type IDs and corresponding aggregated process type ID</entry>
</row>
<row>
<entry><envar>PollutantMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES pollutant IDs and corresponding pollutant name; only listed pollutants will be included in output emission factor tables</entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>

<section>
<title>Run Command syntax</title>
<programlisting>
moves2smkEF.pl [-r RPD|RPV|RPP|RPH] [--formulas PollutantFormulasFile] [--fuel_agg FuelTypeMappingFile] [--src_agg SourceTypeMappingFile] [--road_agg RoadTypeMappingFile] [--proc_agg ProcessTypeMappingFile] InputDBList PollutantMappingFile [OutputPath]
</programlisting>

<itemizedlist>

<listitem>
RPD|RPP|RPV|RPH - optional type of emission factors to process (rate-per-distance, rate-per-vehicle, rate-per-profile, or rate-per-hour); if not specified, script will process all four types
</listitem>

<listitem>
PollutantFormulasFile - list of formulas used to calculate additional emission factors
</listitem>

<listitem>
FuelTypeMappingFile - list of MOVES fuel type IDs and corresponding aggregated fuel type ID
</listitem>

<listitem>
SourceTypeMappingFile - list of MOVES source type IDs and corresponding aggregated source type ID
</listitem>

<listitem>
RoadTypeMappingFile - list of MOVES road type IDs and corresponding aggregated road type ID
</listitem>

<listitem>
ProcessTypeMappingFile - list of MOVES process type IDs and corresponding aggregated process type ID
</listitem>

<listitem>
InputDBList - list of MySQL database names to process (generated by runspec_generator.pl MOVES preprocessor)
</listitem>

<listitem>
PollutantMappingFile - list of MOVES pollutant IDs and corresponding pollutant name
</listitem>

<listitem>
OutputPath - optional; overrides the output path specified in InputDBList
</listitem>

</itemizedlist>


</section>

<section>

<title>Output Files</title>

<informaltable id="tbl_smoke_lookup_tables">
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>rateperdistance_smoke*.csv</envar></entry>
<entry>ASCII</entry>
<entry>RPD SMOKE formatted lookup table (fuel month specific). The format of MOVES lookup tables are described in <xref linkend="tbl_concepts_moves_lookup_tbl_sm_format"/>.</entry>
</row>
<row>
<entry><envar>ratepervehicle_smoke*.csv</envar></entry>
<entry>ASCII</entry>
<entry>RPV SMOKE formatted lookup table (fuel month specific)</entry>
</row>
<row>
<entry><envar>rateperprofile_smoke*.csv</envar></entry>
<entry>ASCII</entry>
<entry>RPP SMOKE formatted lookup table (fuel month specific)</entry>
</row>
<row>
<entry><envar>rateperhour_smoke*.csv</envar></entry>
<entry>ASCII</entry>
<entry>RPH SMOKE formatted lookup table (fuel month specific)</entry>
</row>
<row>
<entry><envar>mcrlist.rateperdistance*.lst</envar>:</entry>
<entry>ASCII</entry>
<entry>list of MOVES-based rateperdistance lookup tables  </entry>
</row>
<row>
<entry><envar>mcrlist.ratepervehicle*.lst</envar>:</entry>
<entry>ASCII</entry>
<entry>list of MOVES-based ratepervehicle lookup tables </entry>
</row>
<row>
<entry><envar>mcrlist.rateperprofile*.lst</envar>:</entry>
<entry>ASCII</entry>
<entry>list of MOVES-based rateperprofile lookup tables </entry>
</row>
<row>
<entry><envar>mcrlist.rateperhour*.lst</envar>:</entry>
<entry>ASCII</entry>
<entry>list of MOVES-based rateperhour lookup tables </entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
</section>

<section id="sect_moves_gen_sccxref">
<title><command>gen_8digit_scc.pl</command></title>

<section>
<title>Description</title>

<para>The <command>gen_8digit_scc.pl</command> script generates a file mapping 8-digits SCCs to aggregated SCCs produced by <command>Moves2smkEF.pl</command>.</para> 
</section>

<section>

<title>Processing Order</title>
<para>The Perl script performs the following steps:</para>

<itemizedlist>
<listitem>
<para>Connect to the first database listed in the InputDBList file</para>
</listitem>
<listitem>
<para>Query the specified database table (rateperdistance, ratepervehicle, rateperprofile, or rateperhour) and generate a list of all SCCs in the MOVES2014 output</para>
</listitem>
<listitem>
<para>Apply the fuel type, source type, road type, and process type mappings to generate a list of 10-digit aggregated SCCs</para>
</listitem>
<listitem>
<para>Output the list of 10-digit aggregated SCCs with corresponding 8-digit SCC (first 8 digits of 10-digit SCC)</para>
</listitem>
</itemizedlist>

</section>

<section>
<title>Files, Environment Variables and Run Syntax</title>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>FuelTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES fuel type IDs and corresponding aggregated fuel type ID</entry>
</row>
<row>
<entry><envar>SourceTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES source type IDs and corresponding aggregated source type ID</entry>
</row>
<row>
<entry><envar>RoadTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES road type IDs and corresponding aggregated road type ID</entry>
</row>
<row>
<entry><envar>ProcessTypeMappingFile</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MOVES process type IDs and corresponding aggregated process type ID</entry>
</row>
<row>
<entry><envar>InputDBList</envar>:</entry>
<entry>ASCII</entry>
<entry>List of MySQL database names to process generated by <command>Runspec_generator.pl</command>; only the first database listed will be used</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>
<title>Run Command syntax</title>

<programlisting>
gen_8digit_scc.pl -r RPD|RPV|RPP|RPH [--fuel_agg FuelTypeMappingFile] [--src_agg SourceTypeMappingFile] [--road_agg RoadTypeMappingFile] [--proc_agg ProcessTypeMappingFile] InputDBList
</programlisting>

<itemizedlist>
<listitem>
RPD|RPP|RPV|RPH - emission factor table to query (rateperdistance, ratepervehicle, rateperprofile, or rateperhour)
</listitem>

<listitem>
FuelTypeMappingFile - list of MOVES fuel type IDs and corresponding aggregated fuel type ID
</listitem>

<listitem>
SourceTypeMappingFile - list of MOVES source type IDs and corresponding aggregated source type ID
</listitem>

<listitem>
RoadTypeMappingFile - list of MOVES road type IDs and corresponding aggregated road type ID
</listitem>

<listitem>
ProcessTypeMappingFile - list of MOVES process type IDs and corresponding aggregated process type ID
</listitem>

<listitem>
InputDBList - list of MySQL database names to process (generated by runspec_generator.pl MOVES preprocessor); only first database listed will be used
</listitem>

</itemizedlist>

</section>

<section>
<title>Output Files</title>

<para><command>gen_8digit_scc.pl</command> outputs a list of 10-digit SCCs and corresponding 8-digit SCCs. Users should direct this output to the file of their choosing.</para>

</section>
</section>
</section>
</section>

<section id="section_sm_utilities">

<title> SMOKE Utility Programs</title>

<section>
<title>Overview</title>

<para>There are thirteen programs covered in this section:</para>

<para><link linkend="sect_utilities_aggwndw"><command>Aggwndw</command></link> is a utility program that can aggregate or window emissions from an I/O API file to a new grid.</para>

<para><link linkend="sect_utilities_bluesky2inv"><command>BlueSky2Inv</command></link> converts output files from the BlueSky fire modeling framework into inventory files that SMOKE can read.</para>

<para>The <link linkend="sect_utilities_cemscan"><command>CEMScan</command></link> program calculates summed annual NOx emissions, SO<subscript>2</subscript> emissions, heat input, gross load, and steam load from a year&rsquo;s worth of CEM data. The output from <command>CEMScan</command> is used by <command>Smkinven</command> to calculate hourly emissions from annual inventory data when processing CEM data.</para>

<para><link linkend="sect_utilities_gentpro"><command>Gentpro</command></link> allows the user to use county average meteorology data to estimate temporal profiles of emissions.</para>

<para><link linkend="sect_utilities_geofac"><command>Geofac</command></link> adjusts SMOKE hourly, gridded, speciated emissions in based on a specified geographic region</para>

<para><link linkend="sect_utilities_invsplit"><command>Invsplit</command></link> splits an ORL inventory into separate inventories by state, grouping the states as indicated by your inputs.</para>

<para><link linkend="sect_utilities_inlineto2d"><command>Inlineto2D</command></link> merge CMAQ Inline 2D emissions with stack group emissions.</para>

<para><link linkend="sect_utilities_layalloc"><command>Layalloc</command></link> vertically redistributes hourly, gridded, speciated pre-gridded emissions from emission sources that could emit above the surface layer (e.g. Energy and Industrial sources) based on an user-defined layer fraction input.</para>

<para><link linkend="sect_utilities_metcombine"><command>Metcombine</command></link> combines 2-D gridded meteorology data with the 1st layer of 3-D gridded meteorology data to create input files for <command>Met4moves</command>.</para>

<para><link linkend="sect_utilities_metscan"><command>Metscan</command></link> reads up to one year&rsquo;s worth of first-layer I/O API meteorology data (whether 2-D or 3-D files) and determine the first and last freeze dates of the year, for use by <command>Tmpbeis3</command> in setting winter/summer emission factors by day and grid cell.</para>

<para><link linkend="sect_utilities_pktreduc"><command>Pktreduc</command></link> reduces the size of /PROJECTION/ packets, but keeps the same information by identifying and implementing state defaults where none already exist in the file.</para>

<para><link linkend="sect_utilities_saregroup"><command>SAregroup</command></link> allows users to regroup existing source apportionment-ready sector-specific group ID into new SA-ready group ID.</para>

<para><link linkend="sect_utilities_smk2emis"><command>Smk2emis</command></link> converts SMOKE netCDF files into a UAM- or CAM<subscript>X</subscript>-ready emissions file.</para>

<para><link linkend="sect_utilities_surgtool"><command>Surgtool</command></link> inputs SMOKE-formatted gridding surrogates for a <quote>fine</quote> input grid and outputs a surrogate file for a <quote>coarse</quote> output grid. It produces approximate <quote>coarse</quote> grid surrogates, the accuracy of which depends on how fine the resolution of the input grid is relative to that of the output grid.</para>

<para><link linkend="sect_utilities_uam2ncf"><command>Uam2ncf</command></link> converts UAM-ready emissions files into I/O API format.</para>

</section>


<section id="sect_utilities_aggwndw">

<title><command>Aggwndw</command></title>

<section>

<title>Description</title>

<para><command>Aggwndw</command> aggregates and/or windows emissions from an I/O API file to a new grid. The program does not change grid projections or interpolate data; the grid boundaries of the input and output grids must be aligned and the output grid must be entirely contained within the input grid. <command>Aggwndw</command> automatically checks that the input and output emissions do not differ by more than 0.01% and also produces a report file containing summed input and output data.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>Aggwndw</command> can be run on any gridded I/O API file. Usually it would be used to create coarse-grid or windowed emissions from fine-grid model-ready output files created by <command>Smkmerge</command> or <command>Mrggrid</command>.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>GRIDDESC</envar></entry>
<entry>ASCII</entry>
<entry>Grid description file containing information about the output grid</entry>
</row>
<row>
<entry><envar>INFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Input gridded emissions file</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>AGGREGATE_EMIS_YN</envar>: [default: N]</para>
<para>Allows users to aggregate mass-based emissions as default while optinally aggregate non-mass like ratio or percentage values.</para>
</listitem>
<listitem>
<para><envar>IOAPI_GRIDNAME_1</envar>: [default: none]</para>
<para>Sets the name of the output grid whose parameters will be read from the <envar>GRIDDESC</envar> file.</para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Gridded emissions file</entry>
</row>
<row>
<entry><envar>REPFILE</envar></entry>
<entry>ASCII</entry>
<entry>Report file; provides summed input and output emissions for QA purposes</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_bluesky2inv">

<title><command>BlueSky2Inv</command></title>

<section>

<title>Description</title>

<para><command>BlueSky2Inv</command> converts output files from the BlueSky fire modeling framework into an annual IDA-formatted inventory and an hourly emissions inventory.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>BlueSky2Inv</command> is used to create inventories from BlueSky output for input into <command>Smkinven</command>.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>COSTCY</envar></entry>
<entry>ASCII</entry>
<entry>Country, state, and county codes file; used to assign time zones to each source based on the source&rsquo;s state and county codes</entry>
</row>
<row>
<entry><envar>FILELIST</envar></entry>
<entry>ASCII</entry>
<entry>List of BlueSky output files including path and filename</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>G_STDATE</envar>: [default: none]</para>

<para>Starting date of data (YYYYDDD); used to set the inventory year in the annual inventory. <envar>G_STDATE</envar> is also used to create default entries in the daily inventory file for each source.</para>
</listitem>
<listitem>
<para><envar>VARLIST</envar>: [default: none]</para>

<para>Selects the variables that will be output in the annual and daily inventories. Valid values are AREA, HFLUX, PM2_5, PM10, PM, PMC, CO, CO2, CH4, NMHC, and TOG. The values for the variable should be formatted as follows:</para>

<para><userinput>setenv VARLIST "AREA, HFLUX, PM2_5, PMC, CO, TOG"</userinput></para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>PTDAY</envar></entry>
<entry>ASCII</entry>
<entry>Daily emissions inventory</entry>
</row>
<row>
<entry><envar>PTINV</envar></entry>
<entry>ASCII</entry>
<entry>Annual IDA-formatted inventory</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_cemscan">

<title><command>CEMScan</command></title>

<section>

<title>Description</title>

<para><command>CEMScan</command> reads a year&rsquo;s worth of CEM data and calculates summed annual NOx emissions, SO<subscript>2</subscript> emissions, heat input, gross load, and steam load for each uniquie ORIS/boiler combination in the output CEM data. While writing the output, CEMScan will skip any ORIS/boiler combinations where the total annual NOx emissions are zero or null or where the total annual gross load, steam load, and heat input are zero or null. The program will write these ORIS/boiler combinations to the report file along with a flag indicating that the combination was not written to the output file. The output from <command>CEMScan</command> is used by <command>Smkinven</command> to calculate hourly emissions from annual inventory data when reading CEM data. Detail information is described in <xref linkend="sect_concepts_hour_specific_cem" />.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>CEMScan</command> should be run before <command>Smkinven</command> when processing CEM data.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>FILELIST</envar></entry>
<entry>ASCII</entry>
<entry>List of CEM input files including path and filename; the files must contain data for an entire year to be consistent with the annual inventory</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>MAX_CEM_UNITS</envar>: [default: none]</para>

<para>Maximum number of CEM units in input data; this value can usually be based on the number of sources in the annual inventory</para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>ASCII</entry>
<entry>CEM summary file</entry>
</row>
<row>
<entry><envar>REPFILE</envar></entry>
<entry>ASCII</entry>
<entry>Report summarizes CEM data</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_gentpro">

<title><command>Gentpro</command></title>

<section>

<title>Description</title>

<para>The <command>Gentpro</command> program estimates emissions temporal profiles for residential wood combustion (RWC), agricultural ammonia (RC_NH3), livestock ammonia (BASH_NH3) or generic area sources by relating meteorology to air emission fluxes. <command>Gentpro</command> reads in hourly gridded meteorology data from the Meteorology-Chemistry Interface Processor (MCIP) and a gridded spatial surrogate (commonly used in SMOKE) to produce temporal profiles and cross-reference data in a comma separated value (CSV) format and/or a temporal data binary netCDF file. Annual MCIP input data are required to calculate temporal profiles with <command>Gentpro</command>. Spatial surrogate(s) are used to identify the grid cells for computing county averaged meteorology variables.</para>
<para><command>Gentpro</command> provides an option to specify a profile method [<envar>PROFILE_METHOD</envar>], which can be set to generate RWC, BASH_NH3, RC_HNH3, or generic meteorology-based temporal profiles. the RWC, BASH_NH3 and RC_NH3 temporal profiles are based on algorithms described by Adelman (2009 and 2010), Mansell et al. (2000), and Bash et al. (2012) respectively, while the MET profiles can ben generated from any user-selected meteorology variable. The RWC profile method produces county-specific daily temporal profiles to convert annual or monthly inventories to daily emissions estimates. Diurnal profiles must then be applied to estimate hourly RWC emissions from the daily estimates. <command>Gentpro</command> provides the option to aggregate the daily RWC profiles to month-of-year profiles as well, which can be used to compute monthly inventory estimates from annual inventory data. The BASH_NH3 and RC_NH3 profile methods produce county-specific hourly temporal profiles to convert annual, monthly, or daily inventories to hourly emissions estimates. <command>Gentpro</command> provides the option to aggregate the hourly profiles to day-of-year or month-of-year profiles as well. The MET profile method represents time series of a selected meteorology variable as a temporal profile and can be used to convert annual, monthly, or daily inventories to hourly emissions estimates. <command>Gentpro</command> also provides the option to aggregate the hourly MET profiles to day-of-year or month-of-year profiles. All of the <command>Gentpro</command> profile options create temporal cross-reference files that associate county FIPS codes in a modeling domain to the new profiles.</para>   


<para><command>[1] RWC</command></para>
<para>A regression equation relating observed daily minimum temperatures and chemical tracers of wood combustion was developed using data from sites in the Pacific Northwest of the United States (Adelman, 2009; Adelman, 2010).  The sites selected to develop the algorithm were screened to be representative of RWC activities.  Equation (1) uses estimates of daily PM2.5 emissions to build either annual-to-daily or annual-to-monthly emission profiles for application to RWC sources.  The algorithm uses county average daily or monthly minimum temperatures to estimate the percentage of RWC emissions allocated to each day or month of the year. <command>Gentpro</command> includes a temperature threshold setting to limit RWC emissions from allocated to days too warm to have much (if any) RWC emissions.  A temperature threshold (T<subscript>t</subscript>) variable is implemented in <command>Gentpro</command> to allow users to set a maximum temperature cutoff by either state or county. By default, <command>Gentpro</command> estimates RWC emissions at temperatures below 50°F. If the temperature threshold variable is set in the Gentpro script, RWC emissions will be activated below T<subscript>t</subscript>. A look-up table of state/county FIPs codes and temperatures (°F) can be input to <command>Gentpro</command> to set several different temperature thresholds across a modeling domain. The purpose of using the temperature threshold override is to control when RWC emissions are activated in regions where the 50°F cutoff may not be appropriate.  For example, counties in southern Florida may only experience one or two days in an entire year when the minimum temperature dips below 50°F. Without using the threshold override, all of the RWC emissions for these counties will be allocated to these one or two days, producing large emissions spikes that may not be realistic. By increasing the temperature threshold, these spikes can be avoided by activating the RWC algorithm on other days.  The outputs from this algorithm are temporal profiles that convert annual or monthly RWC inventories to daily emissions for every county in the modeling domain.</para>
<para>Two alternative RWC temporal profile algorithms are implemented in <command>Gentpro</command>. Equation 1 below shows the algorithm developed from the Pacific Northwest Sites described by Adelman (2009; 2010).</para>

<para>The second RWC temporal algorithm is an ad hoc approximation of the original equation that broadens its application by removing the intercept term.  By removing the intercept term, Equation 2 below will not produce negative emissions when the temperature threshold is increased above 53.3°F.</para>

<para>The alternate RWC algorithms can be selected using <envar>RWC_ALT_EQ_YN</envar> listed below. When <envar>RWC_ALT_EQ_YN</envar> = N, Equation 1 will be used to calculate RWC temporal profiles.</para>

<orderedlist>
<listitem>
<para><command>Original RWC Algorithm developed by Adelman (2009;2010)</command></para>
<para>When T<subscript><emphasis>i,d</emphasis></subscript> is equal or less than 50°F,</para>
<para>PE<subscript><emphasis>i,d</emphasis></subscript> = (42.12 - 0.79 x T<subscript><emphasis>i,d</emphasis></subscript>) / Sum (42.12 - 0.79 x T<subscript><emphasis>i,d</emphasis></subscript>)</para>
<para>When T<subscript><emphasis>i,d</emphasis></subscript> is greater than T<subscript><emphasis>t</emphasis></subscript>,</para>
<para>PE<subscript><emphasis>i,d</emphasis></subscript> = 0.0</para>
<para>When T<subscript><emphasis>i,d</emphasis></subscript> is greater than 50°F and T<subscript><emphasis>i,d</emphasis></subscript> is less than T<subscript><emphasis>t</emphasis></subscript>,</para>
<para>PE<subscript><emphasis>i,d</emphasis></subscript> = (42.12 - 0.79 x 50) / Sum (42.12 - 0.79 x 50)</para>
</listitem>
<listitem>
<para><command>Alternative RWC Algorithm</command></para>
<para>When T<subscript><emphasis>i,d</emphasis></subscript> is equal or greater than T<subscript><emphasis>t</emphasis></subscript>,</para>
<para>PE<subscript><emphasis>i,d</emphasis></subscript> = 0.0</para>
<para>When T<subscript><emphasis>i,d</emphasis></subscript> is less than T<subscript><emphasis>t</emphasis></subscript>,</para>
<para>PE<subscript><emphasis>i,d</emphasis></subscript> = [0.79 x (T<subscript><emphasis>i,t</emphasis></subscript> - T<subscript><emphasis>i,d</emphasis></subscript>)] / Sum [0.79 x (T<subscript><emphasis>i,t</emphasis></subscript> - T<subscript><emphasis>i,d</emphasis></subscript>)]</para>
</listitem>
</orderedlist>


<para>where</para>
<itemizedlist>
<listitem>
PE<subscript><emphasis>i,d</emphasis></subscript> = Percentage of emissions in county <emphasis>i</emphasis> on day <emphasis>d</emphasis>
</listitem>
<listitem>
T<subscript><emphasis>i,d</emphasis></subscript> = Daily minimum ambient temperature (°F) in county <emphasis>i</emphasis> on day <emphasis>d</emphasis>
</listitem>
<listitem>
T<subscript><emphasis>i,t</emphasis></subscript> = Daily threshold ambient temperature (°F) in county <emphasis>i</emphasis>
</listitem>
<listitem>
T<subscript><emphasis>t</emphasis></subscript> = Daily threshold ambient temperature (default = 50°F)
</listitem>
<listitem>
Note: T<subscript><emphasis>i,m</emphasis></subscript> can be replaced by monthly minimum ambient temperature in county <emphasis>i</emphasis> on month <emphasis>m</emphasis>
</listitem>
</itemizedlist>

<para><command>[2] NH3</command></para>
<para>Two NH3 profile methods are implemented in <command>Gentpro</command> to estimate hourly temporal allocation factors, which are output as temporal profiles to convert annual, monthly, or daily livestock ammonia inventories to hourly emissions for every county in the modeling domain. <command>Gentpro</command> can output hour-of-month and hour-of-year temporal profiles that can be input to the <command>Temporal</command>. The recommended application of the BASH_NH3 and RC_NH3 profile methods are to convert monthly agricultural ammonia inventories to hourly emissions.</para>

<orderedlist>
<listitem>
<para>RC_NH3 profile method: Russell and Cass (1986) developed a theoretical equation based on investigations of NH3 emissions from animal waste decomposition conducted by Muck and Steenhuis (1982) to predict diurnal NH3 emission variations as a function of daily meteorology. The Russell and Cass equation (a.k.a RC_METHOD) listed below is adapted for this application to use county average meteorology and implemented in <command>Gentpro</command> to estimate hourly emissions from county annual, monthly, or daily agricultural livestock NH<subscript>3</subscript> inventories.</para>
<para>E<subscript><emphasis>i,h</emphasis></subscript> = [2.36<superscript>(T<subscript><emphasis>i,h</emphasis></subscript>-273)/10</superscript>] x V<subscript><emphasis>i,h</emphasis></subscript></para>
</listitem>
<listitem>
<para>BASH_NH3 profile method: Zhu, Henze, et al. (2013) developed an empirical equation based on observations from the TES instrument with the GEOS-Chem model and its adjoint to estimate diurnal NH3 emission variations from livestocks as a function of ambient temperature and aerodynamic resistance meteorological variable. The equation is listed below.</para>
<para>E<subscript><emphasis>i,h</emphasis></subscript> = [161500/T<subscript><emphasis>i,h</emphasis></subscript> x e<superscript>(-1380/T<subscript><emphasis>i,h</emphasis></subscript>)</superscript>] x AR<subscript><emphasis>i,h</emphasis></subscript></para>
</listitem>
</orderedlist>
<itemizedlist>
<listitem>
<para>PE<subscript><emphasis>i,h</emphasis></subscript> = E<subscript><emphasis>i,h</emphasis></subscript> / Sum(E<subscript><emphasis>i,h</emphasis></subscript>)</para>
</listitem>
</itemizedlist>
<para>where</para>
<itemizedlist>
<listitem>
PE<subscript><emphasis>i,h</emphasis></subscript> = Percentage of emissions in county <emphasis>i</emphasis> on hour <emphasis>h</emphasis>
</listitem>
<listitem>
E<subscript><emphasis>i,h</emphasis></subscript> = Emission rate in county <emphasis>i</emphasis> on hour <emphasis>h</emphasis>
</listitem>
<listitem>
T<subscript><emphasis>i,h</emphasis></subscript> = Ambient temperature (Kelvin) in county <emphasis>i</emphasis> on hour <emphasis>h</emphasis>
</listitem>
<listitem>
V<subscript><emphasis>i,h</emphasis></subscript> = Wind speed (meter/sec) in county <emphasis>i</emphasis> (minimum wind speed is 0.1 meter/sec)
</listitem>
<listitem>
AR<subscript><emphasis>i,h</emphasis></subscript> = Aerodynamic resistance in county <emphasis>i</emphasis>
</listitem>
</itemizedlist>

<para><command>[3] MET: Generic Meteorology Profile Algorithm</command></para>
<para>This is a simple algorithm that computes the percentage of emissions to allocate to each hour based on the hourly fractional contribution of a selected meteorology variable relative to the annual, monthly, and daily sum of all hourly values for that variable.  While the fractional contribution of county-average wind speed for each hour of the year is somewhat meaningless, it does provide a way to build a time series that can be applied to an annual/monthly inventory to estimate hourly values using monthly, daily and/or hourly MET profiles.</para>

<orderedlist>
<listitem>
<para>PE<subscript><emphasis>i,h</emphasis></subscript> = m<subscript><emphasis>i,h</emphasis></subscript> / Sum(m<subscript><emphasis>i,h</emphasis></subscript>)</para>
</listitem>
</orderedlist>

<para>where</para>
<itemizedlist>
<listitem>
PE<subscript><emphasis>i,h</emphasis></subscript> = Percentage of emissions in county <emphasis>i</emphasis> on hour <emphasis>h</emphasis>
</listitem>
<listitem>
m<subscript><emphasis>i,h</emphasis></subscript> = Meteorology variable in county <emphasis>i</emphasis> on hour <emphasis>h</emphasis>
</listitem>
</itemizedlist>

<para><command>[Reference]</command></para>
<para>Adelman, Z. (2010) 'Proposal: Estimating Temporal Profiles for Residential Wood Combustion Emissions', Prepared for U.S. EPA, OAQPS, Research Triangle Park, NC under Contract No. EP-D-07-102 Assignment No. 3-07 (M. Houyoux, WAM) by UNC, Chapel Hill, NC.</para>
<para>Adelman, Z. (2009) 'Technical Memo: Emissions Modeling Improvements Task 2 – Temporal Allocation for Residential Wood Combustion', Prepared for U.S. EPA, OAQPS, Research Triangle Park, NC under Contract No. EP-D-07-102 Assignment No. 2-13 (M. Houyoux, WAM) by UNC, Chapel Hill, NC.</para>
<para>Mansell, G, S. Kemball-Cook, L. Ma (2009) 'Draft Report: Temporal Allocation of Agricultural Ammonia Emissions', Prepared for U.S. EPA, OAQPS, Research Triangle Park, NC under Contract No. EP-D-07-102 Assignment No. 2-13 (M. Houyoux, WAM) by ENVIRON, Novato, CA.</para>
<para>Muck, R.E., and T.S. Steenhuis (1982) 'Nitrogen Losses from Manure', Agricultural Wastes, 4: 41-54.</para>
<para>Russell, A.G. and G.R. Cass (1986) 'Verification of a Mathematical Model for Aerosol Nitrate and Nitric Acid Formation and Its Use for Control Measure Evaluation', Atmospheric Environment, 20: 2011-2025.</para>
<para>Zue, Henze, et al (2013) 'Constraining U.S. Ammonia Emissions using TES Remote Sensing Observations and the GEOS-Chem adjoint model', Journal of Geophysical Research: Atmospheres, 118: 1-14.</para>

</section>

<section>

<title>Processing Order</title>

<para>This optional program must run prior to <command>Temporal</command>.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<figure id="fig_programs_gentpro">

<title><command>Gentpro</command> input and output files</title>
<mediaobject>
<imageobject role="pdf">
<imagedata width="6.5in" fileref="images/programs/gentpro_pdf.jpg" />
</imageobject>
<imageobject role="html">
<imagedata fileref="images/programs/gentpro_html.jpg" />
</imageobject>
</mediaobject>
</figure>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>COSTCY</envar></entry>
<entry>ASCII</entry>
<entry>Five digit code for country, state and county</entry>
</row>
<row>
<entry><link linkend="sect_input_geocode"><envar>GEOCODE_LEVEL[1-4]</envar></link></entry>
<entry>ASCII</entry>
<entry>Geographical level codes and descriptions for gridded inventories, only when USE_EXP_GEO_CODES is set to Y, (COSTCY is ignored when <xref linkend="sect_input_geocode"/> files are used)</entry>
</row>
<row>
<entry><envar>GRIDDESC</envar></entry>
<entry>ASCII</entry>
<entry>Grid descriptions file that defines the output grid for the output surrogates file created by the program. It must include the name of the grid set by the <envar>IOAPI_GRIDNAME     _1</envar> environment variable setting.</entry>
</row>
<row>
<entry><envar>METLIST</envar></entry>
<entry>ASCII</entry>
<entry>A list of meteorology files containing temperature, mixing ratio, and surface pressure data created by <command>Metcombine</command></entry>
</row>
<row>
<entry><envar>RWC_COUNTY_TEMP (optional)</envar></entry>
<entry>ASCII</entry>
<entry>County-specific minimum temperature for RWC equations (see <xref linkend="sect_input_rwc_county_temp" />)</entry>
</row>
<row>
<entry><envar>SRGDESC</envar></entry>
<entry>ASCII</entry>
<entry>Spatial surrogate description file produced by MCIP (see <xref linkend="sect_input_srgdesc" />)</entry>
</row>
<row>
<entry>Surrogate File(s)</entry>
<entry>ASCII</entry>
<entry>Spatial surrogate file(s) selected by <envar>SRG_LIST</envar></entry>
</row>
<row>
<entry><envar>TREF_IN</envar></entry>
<entry>ASCII</entry>
<entry>Temporal cross-reference input file (see <xref linkend="sect_input_amptref" />)</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>
<itemizedlist>
<listitem>
<para><envar>AERO_RESISTANCE_VAR</envar>: [default: blank]</para>
<para>Define the aerodynamic resistance variable name for Bash's algorithm for livestock ammonia sources</para>
</listitem>

<listitem>
<para><envar>SLOPE</envar>: [default: 0.79]</para>
<para>Define the value of the slope of RWC equation</para>
</listitem>
<listitem>
<para><envar>CONSTANT</envar>: [default: 42.12]</para>
<para>Define the value of constant of RWC equation</para>
</listitem>


<listitem>
<para><envar>ENDDATE</envar>: [default: 0]</para>
<para>Defines the last day of year (December 31st) for a proper temporal profile calculation. MCIP file must cover last hour of December 31st of all counties in modeling output time zone (i.e., GMT).</para>
</listitem>

<listitem>
<para><envar>PROFILE_METHOD</envar>: [default: MET]</para>
<para>Indicates which of the three temporal profile types to generate by <command>Gentpro</command></para>
<itemizedlist>
<listitem>
RWC: use the Adelman's regression equation to calculate temporal profiles for residential wood combustion (RWC) sources
</listitem>
<listitem>
BASH_NH3: use the Bash's algorithm to calculate temporal profiles for livestock ammonia sources
</listitem>
<listitem>
RC_NH3: use the Russell and Cass algorithm to calculate temporal hourly profiles for agricultural ammonia sources
</listitem>
<listitem>
MET: use the time series of the selected meteorology variable to calculate temporal profiles
</listitem>
</itemizedlist>
</listitem>

<listitem>
<para><envar>RWC_COUNTY_TEMP_YN</envar>: [default: N]</para>
<para>Allows the user to determine county-specific minimum temperature for RWC estimate equations. It will override default minimum temperature [<envar>DEFAULT_TEMP_RWC</envar>] listed above.</para>
<itemizedlist>
<listitem>
Y: use the county-specific minimum temperature from <link linkend="sect_input_rwc_county_temp"><envar>RWC_COUNTY_TEMP</envar></link> input file.
</listitem>
<listitem>
N: do not use the county-specific minimum temperature for RWC equations.
</listitem>
</itemizedlist>
</listitem>

<listitem>
<para><envar>RWC_EQ_ALT_YN</envar>: [default: Y]</para>
<para>Allows the user to choose the alternative RWC equation listed above to avoid negative RWC emissions.</para>
<itemizedlist>
<listitem>
Y: use the alternative RWC equation to compute RWC emissions.
</listitem>
<listitem>
N: use the original RWC equations to compute RWC emissions.
</listitem>
</itemizedlist>
</listitem>

<listitem>
<para><envar>SCC_LIST</envar>: [default: blank]</para>
<para>Defines a comma-separated list of SCCs that will use the temporal profiles generated by <command>Gentpro</command>, example: setenv SCC_LIST "2104008000,2104008001,2104008002"</para>
</listitem>

<listitem>
<para><envar>SRG_LIST</envar>: [default: 0]</para>
<para>Defines a comma-separated list of SCCs that will use the temporal profiles generated by <command>Gentpro</command>, example setenv SRG_LIST "340,100"</para>
</listitem>

<listitem>
<para><envar>SRGDESC</envar>: [default: none]</para>
<para>Directory path and name of the spatial surrogate file for computing averaged meteorology.</para>
</listitem>

<listitem>
<para><envar>SRGPRO_PATH</envar>: [default: blank]</para>
<para>Defines the location of spatial surrogate files</para>
</listitem>

<listitem>
<para><envar>STDATE</envar>: [default: 0]</para>
<para>Defines the first day of year (January 1st) for a proper temporal profile calculation. MCIP file must cover first hour of January 1st of all counties in modeling output time zone (i.e., GMT).</para>
</listitem>

<listitem>
<para><envar>TEMP_VAR</envar>: [default: blank]</para>
<para>Must define the name of variable for the all PROFILE_METHOD settings to use in the profile calculations. The program looks for the selected meteorology variables first in the METLIST file (set below) that contains a list of Metcombine program output files or MET files that contain targeted variables from the MET_CRO_3D or/and MET_CRO_2D files. If it doesn't find the variable(s) in either file, it stops with an error. </para>
</listitem>

<listitem>
<para><envar>TPRO_OUTPUT</envar>: [default: ALL]</para>
<para>Specifies the type of temporal profiles to produce</para>
<itemizedlist>
<listitem>
MONTHLY: generate month-of-year temporal profiles
</listitem>
<listitem>
DAILY: generate both month-of-year and day-of-month temporal profiles
</listitem>
<listitem>
HOURLY: generate hour-of-year, hour-of-month, and hour-of-day temporal profiles
<itemizedlist>
<listitem>
Not applicable when PROF_METHOD = RWC
</listitem>
</itemizedlist>
</listitem>

<listitem>
ALL: generate all possible profiles for the selected profile method
<itemizedlist>
<listitem>
No hourly profiles will be generated when PROF_METHOD = RWC
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</listitem>

<listitem><para><envar>TREF_IN</envar>: [default: blank]</para>
<para>
Defines an input temporal cross-reference file for supplying monthly, daily, weekly, and hourly profile IDs.  The TREF_IN file will be scanned for the FIPS/SCC combinations of sources associated with profiles generated by <command>Gentpro</command>. If there are no entries in TREF for the specific FIPS/SCC combinations being simulated with <command>Gentpro</command>, the program will look for default cross-reference entries (FIPS=0, SCC=0).
</para>

<itemizedlist>
<listitem>
If TPRO_OUTPUT = DAILY, month-of-year and day-of-month temporal profiles will be generated by <command>Gentpro</command>. Users need to provide diurnal (hourly) profiles will be needed to convert from daily to hourly emissions.
</listitem>
<listitem>
If TPRO_OUTPUT = MONTHLY, month-of-year profiles will be generated by <command>Gentpro</command>. Users need to provide weekly and diurnal profiles will be needed to estimate hourly emissions.
</listitem>
<listitem>
If PROFILE_METHOD = BASH_NH3 or RC_NH3, hour-of-year profiles will be generated by <command>Gentpro</command> to estimate hourly emissions using monthly inventory
</listitem>
<listitem>
If PROFILE_METHOD = MET and TPRO_OUTPUT = HOURLY[or ALL], hour-of-year, hour-of-month and hour-of-day temporal profiles will be output to netCDF TPRO_HOUR by <command>Gentpro</command>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para><envar>USE_EXP_GEO_CODES</envar>: [default: N]</para>
<para>If set to Y then use GEOCODE_LEVEL[1-4] files instead of the COSTCY file to define expanded geographical detail such as country-level(GEOCODE_LEVEL1), country/state-level (GEOCODE_LEVEL2), country/state/county-level (GEOCODE_LEVEL3) or country/state/county/tribal-level (GEOCODE_LEVEL4).</para>
</listitem>
<listitem>
<para><envar>WSPEED_VAR</envar>: [default: blank]</para>
<para> Defines the name of wind speed variable from MET files. It is only used when PROFILE_METHOD is set to "RC_NH3". example: setenv WSPEED_VAR "WSPD10" </para>
</listitem>

</itemizedlist>


</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>TPRO_MON</envar></entry>
<entry>ASCII</entry>
<entry>Month-of-year temporal profiles</entry>
</row>
<row>
<entry><envar>TPRO_DAY</envar></entry>
<entry>ASCII</entry>
<entry>Day-of-month temporal profiles</entry>
</row>
<row>
<entry><envar>TPRO_HOUR</envar></entry>
<entry>I/O API netCDF</entry>
<entry>Hourly temporal profiles</entry>
</row>
<row>
<entry><envar>TREF_OUT</envar></entry>
<entry>ASCII</entry>
<entry>Temporal cross-references input file.</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Gentpro</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_geofac">

<title><command>Geofac</command></title>

<section>

<title>Description</title>

<para>The <command>Geofac</command> program provides a means for adjusting emissions by grid cell after SMOKE has already created model-ready inputs. For example, the program could be used to zero emissions from all grid cells that intersect a certain state, which would be a rough approximation of removing that state&rsquo;s inventory from the model-ready files. Although it is more accurate to modify the emissions using the <command>Cntlmat</command> program, that approach takes longer and is possible only if the SMOKE input files used to create the model ready emissions are still available. <command>Geofac</command> is useful in situations where speed and simplicity are more important than the accuracy of the emissions, or when only the gridded model-ready inputs are available and the inventories used to create them are not.</para>

<para><command>Geofac</command> reads in a gridded 2-D or 3-D SMOKE emissions file (output from the <command>Smkmerge</command> program) and multiplies the emissions with a user-supplied adjustment factor for each individual species in the emissions file. The factors are assigned by grid-cell regions, which are defined by the input <quote>mask</quote> file. Each grid cell either receives the factors or it does not (the mask is simply an on-off switch). The resulting hourly, gridded, speciated emissions data are output to a new I/O API file with the same spatial and temporal resolution and the same model species with different values.</para>

</section>

<section>

<title>Processing Order</title>

<para>This optional program can be run after <command>Smkmerge</command> and before either <command>Mrggrid</command> (if it is being used to merge several <command>Smkmerge</command> output files together) or the AQM of interest.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>GEOMASK</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Gridded, time-independent file that assigns a 1 to any grid cell whose emissions you want to adjust. The emissions from <envar>INFILE</envar> in grid cells that have a 1 in <envar>GEOMASK</envar> are multiplied by the factor provided in <envar>SPECFACS</envar>. All other emissions and grid cells are untouched.<comment>(Note that this file is not documented in Chapter 8.)</comment></entry>
</row>
<row>
<entry><envar>INFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Hourly, gridded, speciated inputs from <command>Smkmerge</command>. <envar>INFILE</envar> should be set to logical file name <envar>AGTS_[L|S]</envar>, <envar>BGTS_[L|S]</envar>, <envar>MGTS_[L|S]</envar>, <envar>PGTS_[L|S]</envar>, <envar>PGTS3D_[L|S]</envar>, <envar>EGTS_[L|S]</envar>, or <envar>EGTS3D_[L|S]</envar>, which are the output files from <command>Smkmerge</command>.</entry>
</row>
<row>
<entry><envar>SPECFACS</envar></entry>
<entry>ASCII</entry>
<entry><para>File that lists the species name and the factor to be applied to all grid cells with a 1 value in the <envar>GEOMASK</envar> file. The species name must be in columns 1-16 and the factor in columns 17-22. For example, the following <envar>SPECFACS</envar> file sample would multiply NO and NO<subscript>2</subscript> emissions by 1.3 (30% increase) and multiply PAR by 0.6 (40% decrease).<comment>(Note that this file is not documented in Chapter 8.)</comment></para>

<programlisting>NO              1.3
NO2             1.3
PAR             0.6</programlisting></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<para>None</para>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Geofac</command></entry>
</row>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Hourly, gridded, speciated emissions, adjusted based on <envar>GEOMASK</envar> and <envar>SPECFACS</envar>.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_inlineto2d">

<title><command>Inlineto2D</command></title>

<section>

<title>Description</title>

<para><command>Inlineto2D</command> merges the CMAQ inline-ready 2-D point sources emissions (INLN) with the elevated source stack group (STACK_GROUPS) files to generate 2-D hourly emissions.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>Inlineto2D</command> can be run on any gridded I/O API file.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>INLN</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>CMAQ-ready Inline 2-D ridded emissions file, output by <command>Smkmerge</command></entry>
</row>
<row>
<entry><envar>STACK_GROUPS</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Elevated sources stack parameters file, output by <command>Elevpoint</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Gridded emissions file</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Inlineto2D</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
</section>

<section id="sect_utilities_invsplit">

<title><command>Invsplit</command></title>

<section>

<title>Description</title>

<para>The <command>Invsplit</command> program splits an ORL inventory file into multiple raw inventory files, based on the state codes. The number of output files is set at run time based on the input file that defines the splitting. Up to 80 new files can be created from a single inventory file, which is more than enough files to split a U.S. inventory into a separate file for each state. The program works on area, on-road mobile, nonroad mobile, and point inventories. Separating a single inventory file into multiple files allows the inventory data to be recombined with other data more easily.</para>

</section>

<section>

<title>Processing Order</title>

<para>This optional program can be run prior to running the <command>Smkinven</command> program to import the emission inventories.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>ARINV</envar>, <envar>MBINV</envar>, or <envar>PTINV</envar></entry>
<entry>ASCII</entry>
<entry>Input inventory file; the logical name used depends on the 
<envar>SMK_SOURCE</envar> setting. The <envar>ARINV</envar> file is for nonpoint (stationary area) and nonroad mobile sources, the <envar>MBINV</envar> file is for on-road mobile sources, and the <envar>PTINV</envar> file is for point sources.</entry>
</row>
<row>
<entry><envar>SPLITS</envar></entry>
<entry>ASCII</entry>
<entry><para>Space-delimited file that lists the state codes and indicates which output file should include the emissions for that state. The first column is for the state codes and the second column is the output file number. In this example, states 1 and 4 will be written to the <envar>OUTFILE01</envar> output file logical name, state 37 to <envar>OUTFILE02</envar>, and state 45 to <envar>OUTFILE03</envar>. The numbers in the second column need not be sequential.<comment>(Note that this file is not documented in Chapter 8.)</comment></para>

<programlisting>01    1
04    1
37    2
45    3</programlisting></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<para>None</para>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>OUTFILEnn</envar></entry>
<entry>ASCII</entry>
<entry>One or more inventory files in the same inventory format input by the <envar>ARINV</envar>, <envar>MBINV</envar>, or <envar>PTINV</envar> input file for a given program run. The actual logical file name of these files is <envar>OUTFILE01</envar>, <envar>OUTFILE02</envar>, <envar>OUTFILE03</envar>, ... <envar>OUTFILEnn</envar>, where nn = the largest number in the second column of the <envar>SPLITS</envar> file. The output file names are not necessarily sequential, depending on whether or not sequential numbers are used in the second column of the splits file.</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Invsplit</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_layalloc">

<title><command>Layalloc</command></title>

<section>

<title>Description</title>

<para>The <command>Layalloc</command> program calculates 3-D emissions from a 2-D pre-gridded emissions file. <command>Layalloc</command> is used to reallocate single layer 2-D surface layer emissions into multiple model layers. This approach is useful for processing pre-gridded or industrial area source inventories that do not contain stack information for plume rise treatment but represent elevated sources.</para>

<para><command>Layalloc</command> reads in a gridded 2-D pre-gridded emissions file (either output from the <command>Smkmerge</command> program or from a pregridded global emission inventory (EDGAR/RCP/HTAP)) and redistributes the emissions into multiple model layers based on a user-defined vertical profile. The vertical profiles that are input to <command>Layalloc</command> consist of a layer bottom height, layer top height, and the fraction of emissions to allocate to the layer. SMOKE willl interpolate from the layer heights (in meters) to the model layers (in sigma-pressure). This approach assumes that the vertical factors are uniformly applied over all horizontal grid cells. The resulting hourly, gridded, speciated 3-D emissions data are output to a new I/O API file with the same temporal resolution and the same model species as the original 2-D emissions file.</para>

</section>

<section>

<title>Processing Order</title>

<para>This optional program can be run after <command>Smkmerge</command> and before either <command>Mrggrid</command> (if it is being used to merge several <command>Smkmerge</command> output files together) or the AQM of interest.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>INFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>2-D hourly, gridded, speciated inputs from <command>Smkmerge</command>. <envar>INFILE</envar> should be set to logical file name <envar>AGTS_[L|S]</envar>, <envar>BGTS_[L|S]</envar>, <envar>MGTS_[L|S]</envar>, <envar>PGTS_[L|S]</envar>, or <envar>EGTS_[L|S]</envar>, which are the output files from <command>Smkmerge</command>.</entry>
</row>
<row>
<entry><envar>MET_CRO_3D</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Meteorology file contains a variable <quote>ZF</quote> which is full-layer height above ground (m)</entry>
</row>
<row>
<entry><envar>LAYER_FRACTION</envar></entry>
<entry>ASCII</entry>
<entry><para>File that lists the layer top and bottom heights in meter(s) along with a percentage factor. For example, the following <envar>LAYER_FRACTION</envar> file sample would distribute 2-D emissions into multiple model layers based upon five user-defined layers.</para>

<programlisting>No., Bottom Ht(m), Top Ht(m), Fraction
1,         0,        100,        0.60
2,       100,        200,        0.20
3,       200,        400,        0.10
4,       400,        600,        0.07
5,       600,       1000,        0.03</programlisting></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<para>None</para>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Layalloc</command></entry>
</row>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>3-D hourly, gridded, speciated emissions, adjusted based on <envar>LAYER_FRACTION</envar>.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_metcombine">

<title><command>Metcombine</command></title>

<section>

<title>Description</title>

<para><command>Metcombine</command> combines 2-D gridded meteorology data with the 1st layer of 3-D gridded meteorology data to create custom files for on-road mobile processing with MOVES. To calculate humidity data for use in MOVES, the program <command>Met4moves</command> needs temperature, pressure, and water vapor mixing ratio data in the same meteorology file. Pressure and mixing ratio data are typically found in the <envar>MET_CRO_3D</envar> file with the variable names PRES and QV, respectively. The <envar>MET_CRO_2D</envar> file usually contains ground-level temperatures (TEMPG), 1.5 meter temperatures (TEMP1P5), 2 meter temperatures (TEMP2), and 10 meter temperatures (TEMP10). While it is possible to use air temperature data from the <envar>MET_CRO_3D</envar> file (variable named TA), it is generally recommended to use temperature data from closer to the ground, i.e. ground or 1.5 meter temperatures from <envar>MET_CRO_2D</envar>. <command>Metcombine</command> is used to create custom meteorology files that contain the variables PRES, QV, and TEMPG (or any other temperature variable).</para>

<para>The program takes two I/O API NetCDF gridded meteorology files as input. The files must have identical grid paramaters, start dates and times, time steps, and run lengths. <command>Metcombine</command> is generally used to combine a 2-D file with a 3-D file, but the program is not restricted to that combination; it can be used to combine two 2-D files or the 1st layers of two 3-D files.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>Metcombine</command> can optionally be run before <command>Met4moves</command>. If used, <command>Metcombine</command> must be run for each individual meteorology file you need to create. For example, if you have five days worth of meteorology data as one-day files, you&rsquo;ll need to run <command>Metcombine</command> five times. If the meteorology variables you wish to use are already in the same file, then you do not need to use <command>Metcombine</command>. Example: If you decide to use ambient air temperature (TA) from the same METCRO_3D file that also contains PRES and QV, then you do not need to run Metcombine.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>METFILE1</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>First gridded meteorology file; can be either a 2-D or 3-D file</entry>
</row>
<row>
<entry><envar>METFILE2</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>Second gridded meteorology file; can be either a 2-D or 3-D file</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>VARLIST</envar>: [default: none]</para>

<para>Sets the names of the variables that will be read from <envar>METFILE1</envar> and <envar>METFILE2</envar>. Each variable must occur in exactly one of the meteorology files, i.e. the same variable cannot be in both files.</para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>2-D output meteorology file. This file contains the variables requested in <envar>VARLIST</envar>; for 3-D data, <envar>OUTFILE</envar> will only contain the 1st layer of data. <envar>OUTFILE</envar> will have the same grid parameters, start date and time, time step, and run length as <envar>METFILE1</envar> and <envar>METFILE2</envar>.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_metscan">

<title><command>Metscan</command></title>

<section>

<title>Description</title>

<para><command>Metscan</command> reads in a single (often annual) temperature I/O API meteorology data file (created from either the <envar>MET_CRO_2D</envar> or <envar>MET_CRO_3D</envar> files) and determines the first freeze date and last freeze date of a year, by grid cell. It outputs a gridded file with a daily (24-hour) time step that contains a single variable. For each grid cell, that variable has a value of 0 (zero) when the date being modeled indicates that the cell is experiencing winter conditions; otherwise it has a value of 1, indicating summer conditions. The program can be set to run in the Northern Hemisphere or in the Southern Hemisphere (it will not work on global meteorology datasets). In the Northern Hemisphere, the first freeze date in the fall marks the start of winter, and the last freeze date in the spring marks the end of winter; all other days are considered summer days. The seasons are reversed in the Southern Hemisphere, and the program accommodates this accordingly.</para>

<para>The BEIS3 model operates using the assumption of either winter or summer emission factors. There are no spring or fall factors available, which is why this program is limited to the choice of summer or winter. The use of the freeze date to determine summer or winter emission factors is based on EPA&rsquo;s recommendation.</para>

<para>The program reads in the name of the temperature variable as an option, so that the ground temperature, 1.5-meter temperature, or 10-meter temperature can be used from the <envar>MET_CRO_2D</envar> file, or the layer-1 temperature can be used from the <envar>MET_CRO_3D</envar> file. See the <envar>TMPR_VAR</envar> option below for more information on the names of the temperature variables that are acceptable.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>Metscan</command> can optionally be used before <command>Tmpbeis3</command>, which does not require the output from <command>Metscan</command> to run. <command>Metscan</command> is needed only when users wish to have <command>Tmpbeis3</command> automatically switch between winter and summer emission factors by grid cell. This approach is recommended when processing time periods and modeling domains include temperatures below 32 &deg;F either for a substantial number of days relative to the number of episode days or at critical dates in the episode.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>MET_CRO_3D</envar></entry>
<entry>I/O API NetCDF</entry>
<entry><para>Meteorology file that can be a 2-D or 3-D file (though the logical file name is the same in both cases) and needs to include all dates in the modeling period. For example, for an annual SMOKE run this file would need to have all hours of the year. The file can be created by extracting one or more temperature variables (at a minimum, the one you intend to use) out of the <envar>MET_CRO_2D</envar> or <envar>MET_CRO_3D</envar> files output by the MCIP or MCPL programs using the <command>m3xtract</command> I/O API utility and appending all days of data into the same file.</para>

<para>The <command>m3xtract</command> utility documentation is provided with the I/O API, but we provide some information here. The utility expects input logical file name <envar>INFILE</envar> and creates output logical file name <envar>OUTFILE</envar>. It prompts for the start date, start time, duration, and variables that you want to extract from the <envar>INFILE</envar>. If <envar>OUTFILE</envar> already exists, <command>m3xtract</command> appends additional data to the file (assuming that the grid is the same and the time period is sequential).</para></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>TMPR_VAR</envar>: [default: TA]</para>

<para>Sets the name of the temperature variable that will be read from the <envar>MET_CRO_3D</envar> input file. Acceptable values for MCIP and MPCL outputs available at the time of this writing are TA (ambient layer-1 temperature from the <envar>MET_CRO_3D</envar> file), TEMP10 (10-meter temperature from the <envar>MET_CRO_2D</envar> file), TGD (ground temperature), TGRND (ground temperature), and TEMP1P5 (1.5-meter temperature). Current guidance from EPA suggests that a 10- to 20-meter temperature is the best choice for the temperature input to BEIS3, to account for the fact that these models do not include a canopy model.</para>
</listitem>
<listitem>
<para><envar>N_S_HEMI</envar>: [default: NORTH]</para>

<para>Sets the program to run for the Northern or Southern Hemisphere. Acceptable values for this setting are:</para>

<itemizedlist>
<listitem>
<para>NORTH: Northern Hemisphere. Program starts July 1 and scans data in reverse chronological order to find the last freeze date and in chronological order to find the first freeze date.</para>
</listitem>
<listitem>
<para>SOUTH: Southern Hemisphere. Program starts January 1 and scans data in chronological order to find the first freeze date. It also starts December 31 and scans the data in reverse chronological order to find the last freeze date.</para>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>BIOSEASON</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>For each grid cell, contains 0 for winter dates and 1 for summer (nonwinter) dates. The file&rsquo;s duration will be as long as that of the input meteorology file you provide.</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Metscan</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_pktreduc">

<title><command>Pktreduc</command></title>

<section id="sect_pktreduc_description">

<title>Description</title>

<para>The <command>Pktreduc</command> program reduces the size of growth packets (using the /PROJECTION/ packet in the <envar>GCNTL</envar> file), but keeps the same information. This is done by identifying and implementing state defaults where possible. This program works solely with growth packets that have state/county and SCC entries only; it will not work if the packet contains SIC, MACT, or pollutant codes.</para>

<para>The program identifies the most common growth factor for each state across the many counties for each SCC, and this factor is assigned as the default for the state/SCC combinations. The county/SCC-specific entries are left as is. In this way, the contents of the file are the same as far as SMOKE is concerned, but the file processes through <command>Cntlmat</command> much faster because the growth packet is much smaller. It is acceptable if state defaults are already in the file, and <command>Pktreduc</command> will leave these untouched. When state defaults are found for a state (i.e., county code is set to 000), the program skips reductions for that state and no changes are made (even if they could be).</para>

</section>

<section>

<title>Processing Order</title>

<para>The <command>Pktreduc</command> program is an optional preprocessor for the <envar>GCNTL</envar> input file to <command>Cntlmat</command> when processing growth packets.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>GCNTL</envar></entry>
<entry>ASCII</entry>
<entry>Growth and controls file that includes only the /PROJECTION/ packet. The other packets that are normally acceptable as input to <command>Cntlmat</command> (see <xref linkend="sect_input_gcntl" />) should not be included in this file when it is an input to <command>Pktreduc</command>. In addition, the /PROJECTION/ packet entries can include only state/county/SCC combinations; no combinations that include SIC, MACT, or pollutant codes or other fields should be included.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<para>None</para>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>GCNTL_OUT</envar></entry>
<entry>ASCII</entry>
<entry>Reformatted <envar>GCNTL</envar> file that includes only the /PROJECTION/ packet for inventory growth. The reformatting performed is described in <xref linkend="sect_pktreduc_description" />.</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Pktreduc</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>
</section>
</section>

<section id="sect_utilities_saregroup">

<title><command>SAregroup</command></title>

<section>

<title>Description</title>

<para>The <command>SAregroup</command> program regroups existing source apportionment (SA) ready group ID to new SA group IDs based on a regroup mapping table that holds the list of desired input source sectors and regroup IDs.</para>

<para><command>SAregroup</command> reads in a set of existing SA-ready gridded emissions files generated from the <command>Smkmerge</command> or <command>Movesmrg</command> program and stack group output files (for point sources only) from <command>Elevpoint</command> program, and a sector-specific regroup mapping input file <envar>REGROUP_GROUPS</envar>, and then outputs a set of SA-ready gridded emissions and stack group output files with new updated regroup IDs.</para>

</section>

<section>

<title>Processing Order</title>

<para>This optional program can be run after <command>Smkmerge</command> and before either <command>Mrggrid</command> (if it is being used to merge several <command>Smkmerge</command> output files together) or the AQM of interest.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry><envar>IN_EMIS</envar></entry>
<entry>ASCII</entry>
<entry>List of SA-ready gridded hourly emissions input files</entry>
</row>
<row>
<entry><envar>IN_SRCS</envar></entry>
<entry>ASCII</entry>
<entry>List of stack group input files that hold SA-ready stack parameters by original SA group ID</entry>
</row>
<row>
<entry><envar>IN_REPORT</envar></entry>
<entry>ASCII</entry>
<entry>List of SA-ready summary report files that holds the details of original mapping between inventory source characteristics and SA group ID</entry>
</row>
<row>
<entry><envar>REGROUP_GROUPS</envar></entry>
<entry>ASCII</entry>
<entry>Regrouping map between original SA group ID to new sector-specific group ID
<programlisting>
Org group ID, Sector1, Sector2, Sector3, ,,,, Sector#
           1,       1,       5,      12, ,,,,, 2
           2,       5,       5,       5, ,,,,, 43
           3,       7,       5,       1, ,,,,, 25
</programlisting>
</entry>
</row>

</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<para>None</para>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>OUT_EMIS</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>SA-ready gridded hourly emissions files with new SA group ID</entry>
</row>
<row>
<entry><envar>OUT_SRCS</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>SA-ready stack group files with new SA group ID</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>SAregroup</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>
</section>
</section>


<section id="sect_utilities_smk2emis">

<title><command>Smk2emis</command></title>

<section>

<title>Description</title>

<para>The <command>Smk2emis</command> program converts SMOKE I/O API gridded, mole-speciated, hourly emissions into the Fortran-binary format used for 2-D emissions by UAM and CAM<subscript>X</subscript>. Files of this format use the UAM keyword <quote>EMISSIONS</quote>. The SMOKE user is responsible for preparing the I/O API inputs with the appropriate chemical species, grid structures, time steps, and units for use in whatever model will be using the results of <command>Smk2emis</command>.</para>

</section>

<section>

<title>Processing Order</title>

<para><command>Smk2emis</command> inputs the I/O API gridded, speciated, hourly emissions files output from <command>Smkmerge</command> (<envar>AGTS_L</envar>, <envar>MGTS_L</envar>, <envar>PGTS_L</envar>, or <envar>EGTS_L</envar>) or output from <command>Tmpbeis3</command> (<envar>BGTS_L</envar>). </para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>[A|B|M|P|E]GTS_L</envar></entry>
<entry>I/O API NetCDF</entry>
<entry>SMOKE 2-D gridded, mole-speciated, hourly emissions file.</entry>
</row>
<row>
<entry><envar>VNAMMAP</envar></entry>
<entry>ASCII</entry>
<entry>Optional file for renaming variables from those in the I/O API file header to those needed by the AQM. See the <envar>SMK2EMIS_VMAP_YN</envar> environment variable below.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>FLABEL</envar>: [default: EMISSIONS (currently the only working option)]</para>

<para>Defines what type of UAM/CAM<subscript>X</subscript> file to output. This setting cannot be adjusted by the user, because the current version of <command>Smk2emis</command> can generate only the <quote>EMISSIONS</quote> file.</para>
</listitem>
<listitem>
<para><envar>SMK2EMIS_VMAP_YN</envar>: [default: N]</para>

<para>Controls whether the name remapping file will be read in, to cause <command>Smk2emis</command> to output different variable names than are in the input file. This is needed for using UAM-AERO, which requires symbols in the variable names (such as <quote>.</quote>, <quote>+</quote>, and <quote>-</quote>) that are not permitted in I/O API file variable names.</para>

<itemizedlist>
<listitem>
<para>Y: Use the <envar>VNAMMAP</envar> file</para>
</listitem>
<listitem>
<para>N: Do not use the <envar>VNAMMAP</envar> file</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>SMK_SOURCE</envar>: [default: none]</para>

<para>Defines the type of sources to be processed. Valid values are:</para>

<itemizedlist>
<listitem>
<para>A: Area sources</para>
</listitem>
<listitem>
<para>B: Biogenic sources</para>
</listitem>
<listitem>
<para>M: On-road mobile sources</para>
</listitem>
<listitem>
<para>P: Point sources</para>
</listitem>
<listitem>
<para>E: All emissions sources (determined by how <command>Smkmerge</command> was run)</para>
</listitem>
</itemizedlist>

<para>In <command>Smk2emis</command>, this variable controls the name of the input NetCDF logical file and the name of the output binary logical file. Unlike in most other SMOKE programs, for this program <envar>SMK_SOURCE</envar> can be set to <quote>E</quote> to indicate that the <quote>every</quote> source category merged file (<envar>EGTS_L</envar>) should be converted from I/O API to Fortran-binary format.</para>
</listitem>
<listitem>
<para><envar>UTM_ZONE</envar>: [default: -9]</para>

<para>Defines UTM zone for the header of the UAM EMISSIONS file.</para>

<itemizedlist>
<listitem>
<para>-9: Latitude-longitude projection</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM_LAYERS</envar>: [default: NLAYS3D]</para>

<para>Defines number of layers in output file</para>

<itemizedlist>
<listitem>
<para>NLAYS3D: Value from SMOKE netCDF input file</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM4_LAYBELOW</envar>: [default: 0]</para>

<para>Defines number of layers below diffusion break</para>

<itemizedlist>
<listitem>
<para>0: UAM-V or CAM<subscript>X</subscript> style</para>
</listitem>
<listitem>
<para>&gt;0: UAM-IV style</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM4_LAYABOVE</envar>: [default: 0]</para>

<para>Defines number of layers above diffusion break</para>

<itemizedlist>
<listitem>
<para>0: UAM-V or CAM<subscript>X</subscript> style</para>
<para>&gt;0: UAM-IV style</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM4_HTSFC</envar>: [default: 0.0]</para>

<para>Defines height of surface layer</para>

<itemizedlist>
<listitem>
<para>0.0: UAM-V or CAM<subscript>X</subscript> style</para>
</listitem>
<listitem>
<para>&gt;0.0: UAM-IV style</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM4_HTLOWR</envar>: [default: 0.0]</para>

<para>Defines minimum height of cells between surface layer and diffusion break (meters)</para>

<itemizedlist>
<listitem>
<para>0.0: UAM-V or CAM<subscript>X</subscript> style</para>
</listitem>
<listitem>
<para>&gt;0.0: UAM-IV</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM4_HTUPPR</envar>: [default: 0.0]</para>

<para>Defines minimum height of cells between diffusion break and top of region(meters)</para>

<itemizedlist>
<listitem>
<para>0.0: UAM-V or CAM<subscript>X</subscript> style</para>
</listitem>
<listitem>
<para>&gt;0.0: UAM-IV</para>
</listitem>
</itemizedlist>

</listitem>
<listitem>
<para><envar>UAM_NOTE</envar>: [default: UAM gridded emissions from SMK2EMIS]</para>

<para>Defines the note to be written to the header of the UAM or CAM<subscript>X</subscript> output file</para>

</listitem>
</itemizedlist>

</section>

<section>

<title>Other Inputs</title>

<para>If you are running <command>Smk2emis</command> interactively, the following inputs will be requested. The default values for these are set by the time variables found in the input I/O API file header. If you are not running <command>Smk2emis</command> interactively, the values of these settings will be taken from the input file being converted to Fortran-binary format, so no action from you is required.</para>

<itemizedlist>
<listitem>
<para>Start date: Starting date of simulation in Julian (DDDYYYY) or Gregorian (MMDDYYYY) formats</para>
</listitem>
<listitem>
<para>Start Time: Starting time of simulation in HHMMSS.</para>
</listitem>
<listitem>
<para>Duration: Simulation duration in hours.</para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>UAM_[A|B|M|P|E]GTS</envar></entry>
<entry>Fortran binary</entry>
<entry>UAM-IV-, UAM-V- or CAMx-ready gridded, hourly emissions.</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Smk2emis</command>.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

<!--
<section>

<title>Earlier Versions</title>

<para>The SMOKE prototype used a <envar>USERIN</envar> file to input the necessary UAM header information. The <envar>USERIN</envar> file is no longer needed. Previous versions of the <command>Smk2emis</command> code also did not use the <envar>SMK_SOURCE</envar> environment variable to set the input or output file names.</para>

</section>
-->

</section>

<section  id="sect_utilities_surgtool">

<title><command>Surgtool</command></title>

<section>

<title>Description</title>

<para>The <command>Surgtool</command> program inputs SMOKE-formatted gridding surrogates for a <quote>fine</quote> input grid and a grid definition for a <quote>coarse</quote> output grid.  It produces an approximate <quote>coarse</quote> grid surrogates file, the accuracy of which depends on how fine the resolution of the input grid is relative to that of the output grid.</para>

<para>The program requires that the input and output grids use a lat-lon, Lambert Conformal, or UTM map projection. <command>Surgtool</command> can also perform Lambert-to-Lambert and UTM zone-to-zone transformations. In addition, the program requires that the input grid resolution be much finer than the output grid resolution (at least three times finer is recommended, though no specific limitation is given by the code). <command>Surgtool</command> supports SMOKE-formatted surrogate coefficient files only.</para>

</section>

<section>

<title>Processing Order</title>

<para>Since <command>Surgtool</command> is an optional program that creates new Area and/or Mobile <envar>BGPRO</envar> spatial surrogate files from existing Area, Mobile and/or Biogenic <envar>BGPRO</envar> spatial surrogate files, it must be run before any of the following programs that use these files: <command>Grdmat</command>, and <command>Smkmerge</command>.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" /> 
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>GRIDDESC</envar></entry>
<entry>ASCII</entry>
<entry>Grid descriptions file that defines the output grid for the output surrogates file created by the program. It must include the name of the grid set by the <envar>IOAPI_GRIDNAME_1</envar> environment variable setting.</entry>
</row>
<row>
<entry><envar>INFILE</envar></entry>
<entry>ASCII</entry>
<entry>Area and Mobile spatial surrogate file format (see <xref linkend="sect_input_amgpro" />) and Biogenic spatial surrogate file format (see <xref linkend="sect_input_bgpro" />). File can be for Lambert Conformal, UTM, or lat-lon projection.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>IOAPI_GRIDNAME_1</envar>: [default: blank]</para>

<para>This variable sets the name of the output grid definition to be read from the <envar>GRIDDESC</envar> input file. The name can be a maximum of 16 characters (the limitation of I/O API grid names).</para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Surgtool</command></entry>
</row>
<row>
<entry><envar>OUTFILE</envar></entry>
<entry>ASCII</entry>
<entry>Estimated surrogates file for the grid defined in <envar>GRIDDESC</envar> and selected by the <envar>IOAPI_GRIDNAME_1</envar> setting. This surrogates file is not as accurate as creating a spatial surrogates file from the MIMS spatial allocator. However, the finer the <command>Surgtool</command> input grid is relative to the output grid, the more accurate the estimated surrogates are.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

</section>

</section>

<section id="sect_utilities_uam2ncf">

<title><command>Uam2ncf</command></title>

<section>

<title>Description</title>

<para>The <command>Uam2ncf</command> program takes UAM  EMISSIONS gridded files and creates an I/O API gridded file from them, which can then be merged with other gridded SMOKE I/O API files. This program is useful for converting area, nonroad mobile, on-road mobile, and biogenic UAM-ready files to the I/O API format needed for CMAQ. <command>Uam2ncf</command> can also be used with low-level point sources, but not with the elevated-point-source inputs for UAM and CAM<subscript>X</subscript>.</para>

<para>If you wish to create CMAQ inputs from model-ready emissions for UAM or CAM<subscript>X</subscript>, you must take the following steps:</para>

<orderedlist>
<listitem>
<para>Use <command>Uam2ncf</command> to convert individual source categories for area, biogenic, and mobile sources to I/O API format.</para>
</listitem>
<listitem>
<para>Run SMOKE for point-source inventory to create 3-D I/O API file.</para>
</listitem>
<listitem>
<para>Run <command>Mrggrid</command> to combine converted inventory for nonpoint sources with SMOKE-created inventory for point sources.</para>
</listitem>
</orderedlist>

</section>

<section>

<title>Processing Order</title>

<para>Because this optional program operates on model-ready files, it is run before the CMAQ air quality model.</para>

</section>

<section>

<title>Files and Environment Variables</title>

<section>

<title>Input Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>GRIDDESC</envar></entry>
<entry>ASCII</entry>
<entry>Grid descriptions file that defines the input grid in the <envar>UAMEMIS</envar> file. This is needed because the <envar>UAMEMIS</envar> file does not include enough information to describe the grid for the I/O API. The file must include the name of the grid set by the <envar>IOAPI_GRIDNAME_1</envar> environment variable setting.</entry>
</row>
<row>
<entry><envar>UAMEMIS</envar></entry>
<entry>Fortran binary</entry>
<entry>UAM-ready, gridded, hourly, speciated emissions file.</entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>

<section>

<title>Input Environment Variables</title>

<itemizedlist>
<listitem>
<para><envar>IOAPI_GRIDNAME_1</envar>: [default: blank]</para>

<para>This variable sets the name of the input (and output) grid definition to be read from the <envar>GRIDDESC</envar> input file. The name can be a maximum of 16 characters long (the limitation of I/O API grid names).</para>
</listitem>
</itemizedlist>

</section>

<section>

<title>Output Files</title>

<informaltable>
<tgroup cols="3">
<colspec colwidth="20*" />
<colspec colwidth="20*" />
<colspec colwidth="60*" />

<thead>
<row>
<entry>File Name</entry>
<entry>Format</entry>
<entry>Description</entry>
</row>
</thead>

<tbody>
<row>
<entry><envar>E2DNCF</envar>:</entry>
<entry>I/O API NetCDF</entry>
<entry>Gridded, hourly, speciated emissions in the I/O API format needed for CMAQ.</entry>
</row>
<row>
<entry><envar>LOGFILE</envar></entry>
<entry>ASCII</entry>
<entry>Log generated from executing <command>Uam2ncf</command></entry>
</row>
</tbody>
</tgroup>
</informaltable>

</section>
</section>

</section>

</section>

</chapter>

